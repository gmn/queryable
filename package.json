{
  "name": "queryable",
  "version": "0.1.3",
  "description": "A tiny, self-contained, NoSQL-like, database parser that stores to human-readable JSON string. Works in both Node and Web browser automagically. Fascillitates structured querying of an array of objects. Able to read/write from text file or gzip.",
  "main": "queryable.js",
  "directories": {
    "example": "examples"
  },
  "scripts": {
    "test": "cd examples; node ./unit_tests.js;"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/gmn/queryable.git"
  },
  "keywords": [
    "nosql",
    "sqlite",
    "nosqlite",
    "mongolite",
    "mongodb",
    "couchdb",
    "json",
    "node",
    "database",
    "db"
  ],
  "author": {
    "name": "Greg Naughton",
    "email": "greg@naughton.org"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/gmn/queryable/issues"
  },
  "private": false,
  "dependencies": {
    "gzbz": "~0.2.1"
  },
  "engines": {
    "node": "0.10.x"
  },
  "_id": "queryable@0.1.2",
  "readmeFilename": "README.md",
  "readme": "# Queryable JS\n\nQueryable - A tiny, self-contained, single file database, written in pure Javascript, which aims to support a functional subset of MongoDB-like commands. It works seamlessly in both the client (browser) and the server (node.js).  Just include it in your project and go.  The database format is stored as human-readable JSON, one file per each database.\n\n## Examples\n\nTo use queryable.js in node.js, simply do:\n```js\nvar queryable = require( 'queryable' );     \n\nvar db = queryable.open( path_to_db );      // ** There are multiple ways to open a db.\n                                            //    The simplest is a string of the path\n                                            //    and filename to where you want it. Eg. \"/tmp/my_data.db\"\n\nvar db = queryable.open( \"Database_Name\" ); \nvar db = queryable.open( {db_name:\"name\",data: JSONObject } ); // loads from json object, that is Array of Objects\n                                            //    eg. [{name:1},{name:2}, ...]\n\ndb.insert( {key:\"Anything you want\", comment:\"fields don't have to match\",keys:\"keys can be anything\"} );\n\nvar db2 = queryable.open( \"another.db\" );   // ** Multiple databases can be opened at once; each is fully independent.\n\ndb2.insert( {subarray:[1,2,'buckle',{'my':'shoe'}]} ); // will insert the whole object, no sweat\n\nvar res = db.find( /regex/ );               // ** Find() command works like Mongo\nvar res = db.find( {key: {'$gt':4}} );      //    all where key > 4\nvar res = db.find({name:{'$exists':true}}).sort({name:-1})  // only rows where 'name' exists, and sort by name DESC\n\n                                            // ** Returns db_result, which has a length property and _data[] array\n                                            //    as well as chainable methods like: .sort(), .limit(), .skip(), ..\n```\nSee the 'examples' folder for more examples of usage.\n\n\n# Full List of Commands\n\n## Supported Methods\n| *object* | command | status | comment/example |\n| --- | --- | --- | --- |\n| **queryable** | | | the return of `require('queryable')` |\n| | `open();` | implemented | returns db_object |\n| | `useGzip(boolean);` | implemented | force use of gzip. Useful for gzipped files lacking '.gz' extension; defaults to false |\n| **db_object** | | | the return of `queryable.open()` |\n| | save() | implemented | writes to current system (either file-system or browser) |\n| | insert(vals_obj) | implemented | inserts vals_obj onto end of table; if vals_obj is an array, will treat contents as array of objects and insert each, one at a time |\n| | update(match, newval) | implemented | finds rows that match `match` and set to `newval` |\n| | find(match, callback) | implemented | returns db_result unless callback is present, then db_result passed to it |\n| | distinct(string,clause) | implemented | finds all rows, eliminates duplicate values of certain key. `db.distinct('name') || db.distinct('name',{age:{$lt:35}})` |\n| | remove() | implemented | `db.remove( {name:/[A-Z](.*)/} )\"` |\n| | get_json() | implemented | returns json string of entire db |\n| | print(fmt) | implemented | spits out tabular json to stdout |\n| | now() | implemented | returns Date().toISOString of the present moment; useful for date fields |\n| | toDate(arg) | implemented | returns new Date(arg) |\n| | count() | implemented | returns table length |\n| **db_result** | | | |\n| | sort() | implemented | &nbsp; |\n| | limit(integer) | implemented | &nbsp; |\n| | skip(integer) | implemented | intege |\n| | count() | implemented | returns length of result set |\n| | getArray() | implemented | &nbsp; |\n| | get_json() | implemented | &nbsp; |\n| | print(fmt) | implemented | debug print to stdout |\n\n## Query Operators\n| Name | Status | comment/example |\n| --- | --- | --- |\n| $gt | implemented | `db.find( {a:{$gt:5} );` |\n| $gte | implemented | `db.find( {a:{$gte:100} );` |\n| $in | not implemented | selects the documents where a field equals any value in an array |\n| $lt | implemented | |\n| $lte | implemented | |\n| $ne | not implemented | Matches all values that are not equal to the value specified in the query | \n| $nin | not implemented | |\n| | | |\n| $or | implemented | `db.find( {$or:{n:1,y:2}} ) //return all results where (n == 1 || y == 2)` |\n| $and | not implemented | |\n| $not | not implemented | |\n| $nor | not implemented | |\n| | | |\n| $exists | implemented | `db.find( {name: {$exists:true} } ) // return all results where the name field exists` |\n| $type | not implemented | |\n| | | |\n| $mod | no plans | |\n| $regex | no plans | |\n| $text | no plans | |\n| $where | no plans | &nbsp; |\n\n## Update Operators\n| Name | Status | comment/example |\n| --- | --- | --- |\n| $inc | not implemented | Increments the value of the field by the specified amount. |\n| $mul | not implemented | Multiplies the value of the field by the specified amount. |\n| $rename | not implemented | Renames a field. |\n| $setOnInsert | not implemented | Sets the value of a field upon document creation during an upsert. Has no effect on update operations that modify existing documents. |\n| $set | implemented | Sets the value of a field in an existing document. |\n| $unset | not implemented | Removes the specified field from an existing document. |\n| $min | not implemented | Only updates if the existing field value is less than the specified value. |\n| $max | not implemented | Only updates if the existing field value is greater than the specified value. |\n| $currentDate | implemented | **use now()** |\n\n\n## In the Works\n\n1. Better documentation (still working on it); Website (not quite yet).\n \n2. Feature Roadmap: which features will be implemented next, roughly in order.\n  * callbacks\n  * $in and $nin\n  * $unset (remove key from rows)\n  * $rename (rename key in rows)\n  * $not\n  * $ne\n  * update().limit()\n  * remove().limit()\n\n3. Sample projects built on queryable demonstrating features and functionality.\n  * [Arcane Vocabulary Tutor](http://lit-tundra-5131.herokuapp.com/)\n  * [basic browser example](https://raw.githubusercontent.com/gmn/queryable/master/examples/browser.html)\n\n\n## Contact \n\nMail: greg@naughton.org for questions, comments, bugs\n"
}
